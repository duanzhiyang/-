		Shell是一个用C语言编写的程序，它是用户使用Linux的桥梁。（命令语言，程序设计语言）
		Shell是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面方位操作系统内核的服务。
		#! /bin/bash: 	#!是一个约定标记，告诉系统这个脚本需要什么解释器来执行，即使用哪一种Shell。
		echo "hello world":		echo命令用于向窗口输出文本  
		运行Shell脚本有两种方法:
			1.作为可执行程序
					将上面的代码保存为test.sh,并cd到相应的目录。
					chmod +x ./test.sh  #使脚本具有执行权限
					./test.sh  			#执行脚本
			2.作为解释器参数
					直接运行解释器，其参数就是shell脚本的文件名
					/bin/sh test.sh
					/bin/php test.php
					(不需要在第一行指定解释器信息，写了也没用)
		sh/bash/csh/tcsh/ksh/pdksh等shell的区别
			sh(bourne Shell):是UNIX最初使用的shell，而且在每种UNIX上都可以使用。编程方面优秀,
				交互不如其他
			bash(bourne again shell):LinusOs默认的，是Bourne shell的扩展。
			csh(c Shell)：比sh更适合变种的Shell ，语法和c语言很类似。
			Tcsh
			Tcsh:是Linux提供C Shell的一个扩展版本
			
			
		Shell变量
			定义变量时，变量名不加美元符号（$,PHP语言中变量需要），如：
				your_name="runoob.com"
				注意：
					变量名和等号之间不能有空格
					首字母必须为（a-z，A-Z）。
					中间不能有空格，可以使用下划线（_）
					不能使用标点。
					不能使用bash里的关键字
				除了显式的直接赋值，还可以用语句给变量赋值，如：
					for file in 'ls /etc' (以上语句将/etc下目录的文件名循环出来)
			使用变量：使用一个定义过的变量，只要在变量名前加美元符号$即可
				your_name='qinjx'
				echo $your_name
				echo ${your_name}  (花括号可选,用于区别变量边界)
				已定义的变量，可以重新被定义
				your_name="tom"
				echo $your_name
				your_name="alibaba"
				echo $your_name （使用变量的时候才加美元符）
			只读变量
				使用readonly命令可以将变量定义为只读变量，只读变量的值不能被改变。
				#!/bin/bash
				myUrl="http://www.baidu.com";
				readonly myUrl   （此时使用的话会报错）
			删除变量
				使用unset命令可以删除变量。语法:
				unset variable_name  (不能删除只读变量,变量被删除后不能再次被使用)
			变量类型
				运行shell时，会同时存在三种变量
				1.局部变量 局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。
				2.环境变量 所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。
						必要时shell脚本也可以定义环境变量
				3.shell变量，shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量。
						以保证shell正常运行
						
						
		Shell字符串：字符串是shell编程中最常用最有用的数据类型（只有数字和字符串，基本）.单双引号都可以。也可以不用引号。
			单引号：
				str='this is a string' 
				单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的。
				单引号字符串中不能出现单引号（对单引号使用转义符后也不行）。
			双引号
				your_name='qinjx';
				str="Hello,I know your are \"$your_name\"! \n"
				双引号里可以有变量
				双引号里可以出现转义字符
			拼接字符串
				your_name="qinjx"
				greeting="hello, "$your_name"!"
				greeting_1="hello,${your_name}!"
				echo $greeting $greeting_1
			获取字符串长度
				string="abcd"
				echo ${#string}   #输出4
			提取子字符串
				string="runoob is a great site"    #从字符串第2个字符开始截取4个字符
				echo ${string:1:4}   #输出unoo
			查找子字符串
				string="runoob is a great company"    #查找字符"i"或"s"的位置
				echo `expr index "$string is"`     #输出8   用的不是单引号而是`
				
				
		Shell数组
			bash支持一维数组（不支持多维数组），并且没有限定数组的大小
			类似于C语言，数组元素的下标由0开始编号。获取数组中的元素要利用下标，下标可以使整数或算是表达式，其值应大于或等于0。
    		定义数组：用括号来表示数组，数组元素用"空格"符号分割开。定义数组的一般形式为：
				数组名=(值1 值2 ... 值n)   
					eg:	array_name=(value0 value1 value2 value3),
						array_name=(
						value0 
						value1 
						value2 
						value3
						),
						array_name[0]=value0
						array_name[1]=value1
						array_name[n]=valuen    (可以不使用连续的下标，而且下标的范围没有限制)
			读取数组	${array_name[n]} , echo ${array_name[@]}   @符号可以获取数组的所有元素
			获取数组长度：获取数组长度的方法与获取字符串长度的方法相同
				length=${#array_name[@]},length=${#array_name[*]}
				lengthn=${#array_name[n]}    #取得数组单个元素的长度
			Shell注释   #注释
			
			
		Shell传递参数
			我们可以在执行Shell脚本时，向脚本传递参数，脚本内获取参数的格式为:$n  n代表一个数字,1为执行脚本的第一个参数，
				2为执行脚本的第二个参数，以此类推......
			eg:向脚本传递三哥参数，并分别输出，其中$0为执行的文件名:
				echo "Shell 传递参数实例!";
				echo "执行的文件名:$0";
				echo "第一个参数为:$1";
				echo "第二个参数为:$2";
				echo "第三个参数为:$3";
				为脚本设置可执行权限，并执行脚本:
				$ chome +x test.sh
				$ ./test.sh 1 2 3 
				Shell 传递参数实例！
				执行的文件名：./test.sh
				第一个参数为：1
				第二个参数为：2
				第三个参数为：3
			$#:传递到脚本的参数个数
			$*:以一个单字符串显示所有向脚本传递的参数。
			$@:也是多有的参数，在双引号中，假设脚本运行时写了三个参数1,2,3 则"*"等价于"1 2 3"(传递了一个参数),
				而"@"等价于"1" "2" "3"(传递了三个参数)
				
				
		Shell数组:Bash Shell只支持一维数组(不支持多维数组),初始化时不需要定义数组大小(与PHP类似)。
			与大部分编程语言类似,数组元素的下标由0开始。
			Shell数组用括号表示,元素用"空格"符号分割开,语法如下：array_name=(value1 value2 ... valuen)
				eg:	#!/bin/bash
					my_array=(A B "C" d)   
					也可以用下标来定义数组
					array_name[0]=value0
					array_name[1]=value1
			读取数组:${array_name[index]}
				eg:	my_array=(A B "C")
					echo "第一个元素为: ${my_array[0]}"
			获取元素中的所有元素:使用@或者*可以获取数组中的所有元素，
				eg: my_array=(A B C)
					echo "数组的元素为:${my_array[*]}"
					echo "数组的元素为:${my_array[@]}"
			获取数组的长度: 与获取字符串长度相同,例如:
				eg:	my_array=(1 2 3)
					echo "数组元素个数为:${#my_array[*]}"
					echo "数组元素个数为:${#my_array[@]}"
					
		Shell基本运算符：算术运算符，关系运算符，布尔运算符，字符串运算符，文件测试运算符。
			原生bash不支持简单的数学运算,但是可以通过其他命令来实现. eg:awk,expr,
			
			expr是一款表达式计算工具，使用它能完成表达式的求值操作。
			eg:两个数相加（注意使用的是反引号` 而不是单引号'） 
				#!/bin/bash 
				val=`expr 2 + 2`
				echo "两数之和为:$val"
				表达式和运算符之间要有空格，例如2+2是不对的，必须写出2 + 2
				完整的表达式要被``包含，注意这个字符不是常用的单引号，是反单引号（1键的左边）
			算术运算
				+ - * /(取整) %(取余) =(赋值) == !=
					注意：乘号(*)前边必须加反斜杠(\)才能实现乘法运算。
			
			关系运算：
				-eq:检测两个数是否相等，相等返回true [$a -eq $b]
				-ne:检测两个数是否相等，不相等返回true
				-gt:检测左边的数是否大于右边的，如果是,则返回true
				-lt:检测左边的数是否小于右边的,如果是，则返回true
				-ge:检测左边的数是否大于等于右边的，如果是，则返回true
				-le:检测左边的数是否小于等于右边的,如果是，则返回true	
			
			布尔运算
				!:非运算，表达式为true，则返回false，否则返回true
				-o:或运算,有一个表达式为true则返回true
				-a:与运算，连个表达式都为true才返回true。
				
			逻辑运算
				&&  逻辑and
				||  逻辑OR
				
			字符串运算符
				=  检测两个字符串是否相等，相等返回true
				!= 检测两个字符串是否相当，不相等返回true
				-z 检测字符串长度是否为0，为0返回true
				-n 检测字符串长度是否为0，不为0返回true
				str 检测字符串是否为空，不为空返回true
				
			文件测试运算符
				-b file 检测文件是否是块设备文件，如果是，则返回true
				-c file 检测文件是否是字符设备文件，如果是，则返回true
				-d file 检测文件是否是目录，如果是，则返回true
				-f file 检测文件是否是普通文件(既不是目录，也不是设备文件)，如果是，则返回true
				-g file 检测文件是否设置了SGID位，如果是，则返回true
				-r file 检测文件是否可读，如果是，则返回true
				-w file 检测文件是否可写，如果是，则返回true
				-x file 检测文件是否可执行，是返回true
				-s file 检测文件是否为空（大小是否大于0）,不为空返回true
				-e file 文件（目录）是否存在，是，返回true
			
			
			echo命令：输出字符串
				eg: echo "It is a test"
					双引号可以完全省略
				显示转义字符
					echo ""It is a test\""  （双引号仍可以省略）
				显示变量
					read name   			# read命令从标准输入中读取一行，并把输入行的每个字段的值指定给shell变量
					echo "$name It is a test"
				显示换行
					echo -e "OK! \N"    # -e开启转义 (必须开启)
					echo "It is a test"
				显示不换行
					echo -e "OK! \c"    # \c不换行
					echo "It is a test"
				显示结果定向至文件
					echo "It is a test" > myfile.txt
				原样输出字符串，不进行转义或取变量(用单引号)
					echo '$name\"'
				显示命令执行结果 
					echo `date` #结果将显示当前日期
				
				
			printf: 移植性比echo好，printf使用引用文本或空格分隔的参数,外面可以在printf中使用格式化字符串，还可以制定
					字符串的宽度，左右对齐方式等。默认printf不会像echo自动添加换行符，我们可以手动添加 \n
					printf format-string [arguments...]  #format-string:格式控制字符串 ， arguments:参数列表
					
					%s,%c,%d,%f都是格式替代符
					%-10s 指一个宽度为10个字符(-表示左对齐，没有则表示右对齐)，任何字符都会被显示在10个字符宽的字符内，如果
						  不足则自动以空格填充，超过也会将内容全部显示出来
					%-4.2f 指格式化为小数，其中.2指保留2位小数 
					
					%d %s %c %f 
						d: Decimal十进制整数，对应位置参数必须是十进制整数，否则报错。
						s：String字符串，对应位置参数必须是字符串或者字符型，否则报错。
						c：char字符 对应位置参数必须是字符串或者字符型，否则报错。
						f：float浮点 对应位置参数必须是数字型，否则报错。
			
			
			test：test命令用于检查某个条件是否成立，他可以进行数值,字符和文件三个方面的测试。
				
				数值测试：参数：  -eq	等于则为真
								  -ne	不等于则为真
								  -gt	大于则为真
								  -ge	大于等于则为真
								  -lt	小于则为真
								  -le	小于等于则为真
								eg: 
									num1=100
									num2=100
									if test $[num1] -eq $[num2]     //代码中[]执行基本的算术运算 如加法
									then 
										echo '两个数相等'
									else
										echo '两个数不相等'
									fi
				字符串测试：参数：	=	等于则为真
									!=	不相等则为真
									-z 字符串	字符串长度为0则为真
									-n 字符串	字符串的长度不为0则为真
								eg:
									num1="ru1noob"
									num2="runoob"
									if test $num1 = $num2
									then 
										echo '两个字符串相等'
									else 
										echo '两个字符串不相等'
									fi
				文件测试：参数：	-e 文件名	如果文件存在则为真
									-r 文件名	如果文件存在且可读则为真
									-w 文件名	如果文件存在且可写则为真
									-x 文件名	。。。。。。可运行。。。
									-s 文件名	。。。。。。且至少有一个字符。。。
									-d 文件名	。。。。。。且为目录。。。
									-f 文件名	。。。。。且为普通文件。。
									-c 文件名	。。。。。且为字符型特殊文件。。
								eg:
									cd /bin
									if test -e ./bash
									then
										echo '文件已存在'
									else
										echo '文件不存在'
									fi
				另外，Shell还提供了与(-a)，或(-o)，非(!)三个逻辑操作符用于将测试条件连接起来，其优先级为："!"最高 "-a"次之 "-o"最低


			
			Shell流程控制：sh的流程控制不可为空
				
				
		